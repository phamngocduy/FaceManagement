<script async src="@Url.Content("~/Scripts/face-api.min.js")"></script>
<input id="Upload" type="file" style="display:none" />
<canvas id="Canvas" style="width:100%;height:100vh"></canvas>

@section Scripts {
    <script>
        $(function () {
            $('#Upload').change(function () {
                if (this.files && this.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        var canvas = document.getElementById('Canvas');
                        var ctx = canvas.getContext('2d');
                        var image = new Image();

                        image.onload = function () {
                            var img = document.createElement("img");
                            img.src = e.target.result;

                            var ctx = canvas.getContext("2d");
                            ctx.drawImage(img, 0, 0);

                            var width = img.width;
                            var height = img.height;
                            console.log(width); console.log(height);

                            if (MAX_WIDTH * height / width <= MAX_HEIGHT) {
                                height = MAX_WIDTH * height / width;
                                width = MAX_WIDTH;
                            } else {
                                width = MAX_HEIGHT * width / height;
                                height = MAX_HEIGHT;
                            }
                            console.log(width); console.log(height);
                            canvas.width = width;
                            canvas.height = height;
                            var ctx = canvas.getContext("2d");
                            ctx.drawImage(img, 0, 0, width, height);
                            $(canvas).width('');
                            $(canvas).height('');

                            FaceDetection(canvas);
                        }

                        image.src = e.target.result;
                    };

                    reader.readAsDataURL(this.files[0]);
                }
            });

            $('#Canvas').height($('#Canvas').height() - $('#Canvas').offset().top);
            MAX_WIDTH = $('#Canvas').width(); MAX_HEIGHT = $('#Canvas').height();
            $('#Canvas').width(MAX_WIDTH).height(MAX_HEIGHT).css('border', 'ridge');
        })
    </script>

    <script>
        const video = document.getElementById('video');

        window.onload = function () {
            $.blockUI();
            NOW = Date.now();
            console.log('Loading models');
            Promise.all([
                faceapi.nets.mtcnn.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.ssdMobilenetv1.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.tinyFaceDetector.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.faceLandmark68Net.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.faceRecognitionNet.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.faceExpressionNet.loadFromUri('@Url.Content("~/Static")')
            ]).then(logTime);
        }

        function logTime() {
            $.unblockUI();
            console.log('Finished in ' + (Date.now() - NOW));
            NOW = Date.now();
        }

        async function FaceDetection(canvas) {
            $.blockUI();
            NOW = Date.now();
            console.log('Processing image');
            var image = new Image(); image.src = canvas.toDataURL();
            const displaySize = { width: canvas.width, height: canvas.height }
            //faceapi.matchDimensions(canvas, displaySize);
            const detections = await faceapi.detectAllFaces(image, new faceapi.SsdMobilenetv1Options()) // faceapi.MtcnnOptions()
                .withFaceLandmarks().withFaceExpressions();
            const resizedDetections = faceapi.resizeResults(detections, displaySize);
            //canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
            faceapi.draw.drawDetections(canvas, resizedDetections);
            //faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
            faceapi.draw.drawFaceExpressions(canvas, resizedDetections);
            $.unblockUI();
            console.log('Finished in ' + (Date.now() - NOW));
            NOW = Date.now();
        }
    </script>

    <script src="//cdn.jsdelivr.net/npm/eruda"></script>
    <script>eruda.init();</script>
}