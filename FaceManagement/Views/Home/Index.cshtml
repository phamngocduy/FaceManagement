@{
    var UserId = User.Identity.GetUserName() ?? "";
    UserId = UserId.ToLower().Split('@')[0].Split('.').Last();
}
<script async src="@Url.Content("~/Scripts/face-api.min.js")"></script>
<input id="Upload" type="file" style="display:none" accept="image/*" capture />
<canvas id="Canvas" style="width:100%;height:100vh"></canvas>
<button id="Check" style="position:fixed;left:1em;bottom:1em;display:none">Check in (60s)</button>

@if (!Request.IsAuthenticated)
{
    <script>
        if (confirm('Do you want to login?'))
            window.location.replace('@Url.Action("Login", "Account")');
    </script>
}

@section Scripts {
    <script>
        $(function () {
            $('#Upload').change(function () {
                if (this.files && this.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        var canvas = document.getElementById('Canvas');
                        var ctx = canvas.getContext('2d');
                        var image = new Image();

                        image.onload = function () {
                            var img = document.createElement("img");
                            img.src = e.target.result;

                            var ctx = canvas.getContext("2d");
                            ctx.drawImage(img, 0, 0);

                            var width = img.width;
                            var height = img.height;
                            var maxWidth = MAX_WIDTH;
                            var maxHeight = MAX_HEIGHT;

                            if (maxWidth * height / width <= maxHeight) {
                                height = maxWidth * height / width;
                                width = maxWidth;
                            } else {
                                width = maxHeight * width / height;
                                height = maxHeight;
                            }
                            canvas.width = width;
                            canvas.height = height;

                            var ctx = canvas.getContext("2d");
                            switch (ROTATE_VAL) {
                                case "-90":
                                    canvas.width = height;
                                    canvas.height = width;
                                    ctx.transform(1, 0, 0, 1, 0, width);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(-ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, 0, -width);
                                    resizeImg(canvas);
                                    break;
                                case "90":
                                    canvas.width = height;
                                    canvas.height = width;
                                    ctx.transform(1, 0, 0, 1, height, 0);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(-ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, -height, 0);
                                    resizeImg(canvas);
                                    break;
                                case "180":
                                    ctx.transform(1, 0, 0, 1, width, height);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, -width, -height);
                                    break;
                                default:
                                    ctx.drawImage(img, 0, 0, width, height);
                            }
                            $.blockUI();
                            $(canvas).width('');
                            $(canvas).height('');
                            setTimeout(function () {
                                FaceDetection(canvas);
                            }, 100);
                        }

                        image.src = e.target.result;
                    };

                    reader.readAsDataURL(this.files[0]);
                }
            });

            $('#Canvas').height($('#Canvas').height() - $('#Canvas').offset().top);
            MAX_WIDTH = $('#Canvas').width(); MAX_HEIGHT = $('#Canvas').height();
            $('#Canvas').width(MAX_WIDTH).height(MAX_HEIGHT).css('border', 'ridge');
            $('#Canvas').each(function () {
                var ctx = this.getContext("2d");
                ctx.font = "13px Comic Sans MS";
                ctx.fillStyle = "red";
                ctx.textAlign = "center";
                ctx.fillText("Click 'Take photo' to start", this.width / 2, this.height / 2);
            });

            $('[id=Model]').click(function () {
                $('button.navbar-toggle').trigger('click');
                $($(this).parents('ul')[0]).find('li').removeClass('active');
                $($(this).parents('li')[0]).addClass('active');
                switch ($(this).attr('data-val')) {
                    case 'MTCNN':
                        OPTIONS = MTCNN;
                        break;
                    case 'SSDMOBILENETV1':
                        OPTIONS = SSDMOBILENETV1;
                        break;
                    case 'TINYFACEDETECTOR':
                        OPTIONS = TINYFACEDETECTOR;
                        break;
                }
                $.blockUI();
                $('#Upload').trigger('change');
            });
            ROTATE_VAL = localStorage.getItem('ROTATE_VAL');
            ROTATE_VAL = ROTATE_VAL == null ? 0 : ROTATE_VAL;
            localStorage.setItem('ROTATE_VAL', ROTATE_VAL);
            $('[id=Rotate]').click(function () {
                $('button.navbar-toggle').trigger('click');
                $($(this).parents('ul')[0]).find('li').removeClass('active');
                $($(this).parents('li')[0]).addClass('active');
                ROTATE_VAL = $(this).attr('data-val');
                $.blockUI();
                $('#Upload').trigger('change');
                localStorage.setItem('ROTATE_VAL', ROTATE_VAL);
            }).filter(`[data-val=${ROTATE_VAL}]`).parent().addClass('active');
        })
    </script>
    <script>
        $.blockUI({ message: '<h1><img src="@Url.Content("~/Content/busy.gif")" /> Loading ...<span id="Progress">1</span>/7</h1>' });
        window.onload = function () {
            USERID = '@UserId';
            NOW = Date.now();
            console.log('Loading models');
            FETCH = self.fetch;
            self.fetch = function (input) {
                return FETCH(input, { cache: "no-store" });
            }
            function showProgress(val) {
                $('#Progress').text(val);
            }
            Promise.all([
                faceapi.nets.mtcnn.loadFromUri('@Url.Content("~/Static")'), showProgress(1),
                faceapi.nets.ssdMobilenetv1.loadFromUri('@Url.Content("~/Static")'), showProgress(2),
                faceapi.nets.tinyFaceDetector.loadFromUri('@Url.Content("~/Static")'), showProgress(3),
                faceapi.nets.faceLandmark68Net.loadFromUri('@Url.Content("~/Static")'), showProgress(4),
                faceapi.nets.faceRecognitionNet.loadFromUri('@Url.Content("~/Static")'), showProgress(5),
                faceapi.nets.faceExpressionNet.loadFromUri('@Url.Content("~/Static")'), showProgress(6)
            ]).then(async function () {
                console.log('Finished in ' + (Date.now() - NOW));
                NOW = Date.now(); showProgress(7);
                MTCNN = new faceapi.MtcnnOptions();
                SSDMOBILENETV1 = new faceapi.SsdMobilenetv1Options();
                TINYFACEDETECTOR = new faceapi.TinyFaceDetectorOptions();
                OPTIONS = TINYFACEDETECTOR;
                console.log('Loading FaceID');
                try {
                    if (localStorage.getItem(USERID) == null) {
                        if (new RegExp('[0-9]+[a-z]+[0-9]+$').test(USERID)) {
                            var path = USERID.match(/[a-z]+/)[0];
                            paths = USERID.split(path);
                            USERID = paths[0] + '/' + path + '/' + paths[1];
                        }
                        const img = await faceapi.fetchImage(`@Url.Content("~/App_Data/FaceID/")${USERID}.jpg`);
                        var detections = await faceapi.detectSingleFace(img, TINYFACEDETECTOR).withFaceLandmarks().withFaceDescriptor();
                        if (detections == undefined) {
                            alert('Using MTCNN models');
                            detections == await faceapi.detectSingleFace(img, MTCNN).withFaceLandmarks().withFaceDescriptor();
                        }
                        if (detections == undefined) {
                            alert('Using SsdMobilenetv1 models');
                            detections == await faceapi.detectSingleFace(img, SSDMOBILENETV1).withFaceLandmarks().withFaceDescriptor();
                        }
                        localStorage.setItem(USERID, JSON.stringify(Array.prototype.slice.call(detections.descriptor)));
                    }
                    const descriptor = [new Float32Array(JSON.parse(localStorage.getItem(USERID)))];
                    if (localStorage.getItem(`${USERID}2`) != null)
                        descriptor.push(new Float32Array(JSON.parse(JSON.parse(localStorage.getItem(`${USERID}2`)).descriptor)));
                    const labeledFaceDescriptors = new faceapi.LabeledFaceDescriptors(USERID, descriptor);
                    faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, descriptor.length == 1 ? 0.5 : 0.45);
                } catch (err) {
                    console.error(err);
                    @if (Request.IsAuthenticated)
                    {
                        @MvcHtmlString.Create("alert('Face Not Found');")
                    }
                    faceMatcher = null;
                }

                unblockUI();
            });
        }

        function unblockUI() {
            $.unblockUI();
            console.log('Finished in ' + (Date.now() - NOW));
            NOW = Date.now();
        }

        function resizeImg(canvas) {
            var img = document.createElement("img");
            img.src = canvas.toDataURL();

            img.onload = function () {
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);

                var width = img.width;
                var height = img.height;
                var maxWidth = MAX_WIDTH;
                var maxHeight = MAX_HEIGHT;

                if (maxWidth * height / width <= maxHeight) {
                    height = maxWidth * height / width;
                    width = maxWidth;
                } else {
                    width = maxHeight * width / height;
                    height = maxHeight;
                }
                canvas.width = width;
                canvas.height = height;

                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0, width, height);
                $(canvas).width('');
                $(canvas).height('');
            }
        }

        async function FaceDetection(canvas) {
            NOW = Date.now();
            console.log('Processing image');
            var image = new Image(); image.src = canvas.toDataURL();
            const displaySize = { width: canvas.width, height: canvas.height }
            //faceapi.matchDimensions(canvas, displaySize);
            const detections = await faceapi.detectAllFaces(image, OPTIONS)
                .withFaceLandmarks().withFaceExpressions().withFaceDescriptors();
            const resizedDetections = faceapi.resizeResults(detections, displaySize);
            //canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
            faceapi.draw.drawDetections(canvas, resizedDetections);
            //faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
            faceapi.draw.drawFaceExpressions(canvas, resizedDetections);
            if (faceMatcher != null) {
                const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor));
                var distance = 1;
                var descriptor = null;
                var found = false;
                results.forEach((result, i) => {
                    const box = resizedDetections[i].detection.box;
                    const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() });
                    drawBox.draw(canvas);
                    if (result.label == USERID) {
                        if (result.distance < distance) {
                            distance = result.distance;
                            descriptor = detections[i].descriptor;
                        }
                        found = true;
                    }
                    if (i == results.length - 1) {
                        if (distance < 1) {
                            if (localStorage.getItem(`${USERID}2`) == null || distance < JSON.parse(localStorage.getItem(`${USERID}2`)).distance)
                                localStorage.setItem(`${USERID}2`, JSON.stringify({ distance: distance, descriptor: JSON.stringify(Array.prototype.slice.call(descriptor)) }));
                        }
                        if (found == true) {
                            var check = $('#Check').attr('time', 30).show();
                            var interval = setInterval(function () {
                                var time = check.attr('time') - 1;
                                check.attr('time', time).text(`Check in (${time}s)`);
                                if (time <= 0) {
                                    clearInterval(interval);
                                    check.fadeToggle("slow", "linear");
                                }
                            }, 1000);
                        }
                    }
                });
            }
            unblockUI();
        }

        document.getElementById('Check').onclick = function () {
            var code = prompt("Enter class's code:");
            if (code == null) return; else $.blockUI();
            document.getElementById('Canvas').toBlob(function (image) {
                var form = new FormData();
                form.append('code', code);
                form.append('face', image);
                form.append('user', USERID);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Upload", "Home")',
                    data: form,
                    processData: false,
                    contentType: false
                }).done(function (data) {
                    alert(data);
                    location.replace(`@Url.Content("~/App_Data/Checks/")${code.split('-')[0]}/${USERID}.jpg`);
                });
            }, 'image/jpeg');
        }
    </script>

    <script src="//cdn.jsdelivr.net/npm/eruda"></script>
    <script>eruda.init();</script>
}