@{
    var UserId = User.Identity.GetUserName() ?? "";
    UserId = UserId.ToLower().Split('@')[0].Split('.').Last();
}
<script async src="@Url.Content("~/Scripts/face-api.min.js")"></script>
<input id="Upload" type="file" style="display:none" accept="image/*" capture />
<canvas id="Canvas" style="width:100%;height:100vh"></canvas>
<button id="Check" style="position:fixed;left:1em;bottom:1em;display:none" class="btn-success">Check in (?0s)</button>
<button id="Double" class="btn btn-primary" style="position:fixed;left:0;top:50px;opacity:0.3"><span class="glyphicon glyphicon-user"></span></button>

@if (!Request.IsAuthenticated)
{
    <script>
        if (confirm('Do you want to login?'))
            window.location.replace('@Url.Action("Login", "Account")');
    </script>
}

@section Scripts {
    <script>
        var MAX_WIDTH, MAX_HEIGHT, OPTIONS, TINYFACEDETECTOR, MTCNN, SSDMOBILENETV1, ROTATE_VAL, NOW;

        $(function () {
            $('#Canvas').height($('#Canvas').height() - $('#Canvas').offset().top);
            MAX_WIDTH = $('#Canvas').width(); MAX_HEIGHT = $('#Canvas').height();
            $('#Canvas').width(MAX_WIDTH).height(MAX_HEIGHT).css('border', 'ridge');
            $('#Canvas').each(function () {
                var ctx = this.getContext("2d");
                ctx.font = "13px Comic Sans MS";
                ctx.fillStyle = "red";
                ctx.textAlign = "center";
                ctx.fillText("Click 'Take photo' to start", this.width / 2, this.height / 2);
            });

            $('[id=Model]').click(async function () {
                $('button.navbar-toggle').trigger('click');
                $($(this).parents('ul')[0]).find('li').removeClass('active');
                $($(this).parents('li')[0]).addClass('active');
                switch ($(this).attr('data-val')) {
                    case 'MTCNN':
                        await faceapi.nets.mtcnn.loadFromUri('@Url.Content("~/Static")');
                        OPTIONS = MTCNN;
                        break;
                    case 'SSDMOBILENETV1':
                        OPTIONS = SSDMOBILENETV1;
                        break;
                    case 'TINYFACEDETECTOR':
                        OPTIONS = TINYFACEDETECTOR;
                        break;
                }
                $.blockUI();
                $('button.navbar-toggle').trigger('click');
                $('#Upload').trigger('change');
            });
            ROTATE_VAL = localStorage.getItem('ROTATE_VAL');
            ROTATE_VAL = ROTATE_VAL == null ? 0 : ROTATE_VAL;
            localStorage.setItem('ROTATE_VAL', ROTATE_VAL);
            $('[id=Rotate]').click(function () {
                $('button.navbar-toggle').trigger('click');
                $($(this).parents('ul')[0]).find('li').removeClass('active');
                $($(this).parents('li')[0]).addClass('active');
                ROTATE_VAL = $(this).attr('data-val');
                $.blockUI();
                $('#Upload').trigger('change');
                localStorage.setItem('ROTATE_VAL', ROTATE_VAL);
            }).filter(`[data-val=${ROTATE_VAL}]`).parent().addClass('active');
        });
    </script>

    <script>
        $(function () {
            $('#Upload').change(function () {
                if (this.files && this.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var canvas = document.getElementById('Canvas');
                        var ctx = canvas.getContext('2d');
                        var image = new Image();

                        image.onload = function () {
                            var img = document.createElement("img");
                            img.src = e.target.result;

                            var ctx = canvas.getContext("2d");
                            ctx.drawImage(img, 0, 0);

                            var width = img.width;
                            var height = img.height;
                            var maxWidth = MAX_WIDTH;
                            var maxHeight = MAX_HEIGHT;

                            if (maxWidth * height / width <= maxHeight) {
                                height = maxWidth * height / width;
                                width = maxWidth;
                            } else {
                                width = maxHeight * width / height;
                                height = maxHeight;
                            }
                            canvas.width = width;
                            canvas.height = height;

                            var ctx = canvas.getContext("2d");
                            switch (ROTATE_VAL) {
                                case "-90":
                                    canvas.width = height;
                                    canvas.height = width;
                                    ctx.transform(1, 0, 0, 1, 0, width);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(-ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, 0, -width);
                                    resizeImage(canvas);
                                    break;
                                case "90":
                                    canvas.width = height;
                                    canvas.height = width;
                                    ctx.transform(1, 0, 0, 1, height, 0);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(-ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, -height, 0);
                                    resizeImage(canvas);
                                    break;
                                case "180":
                                    ctx.transform(1, 0, 0, 1, width, height);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.drawImage(img, 0, 0, width, height);
                                    ctx.rotate(ROTATE_VAL * Math.PI / 180);
                                    ctx.transform(1, 0, 0, 1, -width, -height);
                                    break;
                                default:
                                    ctx.drawImage(img, 0, 0, width, height);
                            }
                            $.blockUI();
                            $(canvas).width('');
                            $(canvas).height('');
                            setTimeout(function () {
                                detectFaces(canvas).then(logProcess);
                            }, 100);
                        }
                        image.src = e.target.result;
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });
        });

        function resizeImage(canvas) {
            var img = document.createElement("img");
            img.src = canvas.toDataURL();

            img.onload = function () {
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);

                var width = img.width;
                var height = img.height;
                var maxWidth = MAX_WIDTH;
                var maxHeight = MAX_HEIGHT;

                if (maxWidth * height / width <= maxHeight) {
                    height = maxWidth * height / width;
                    width = maxWidth;
                } else {
                    width = maxHeight * width / height;
                    height = maxHeight;
                }
                canvas.width = width;
                canvas.height = height;

                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0, width, height);
                $(canvas).width('');
                $(canvas).height('');
            }
        }

        function logProcess(text) {
            if (text != undefined) {
                NOW = Date.now();
                console.log(text);
            } else {
                $.unblockUI();
                console.log('Finished in ' + (Date.now() - NOW));
            }
        }

        function getExpression(expressions) {
            var expression, score = 0;
            for (var key in expressions)
                if (expressions[key] > score) {
                    expression = key;
                    score = expressions[key];
                }
            return { key: expression, value: score };
        }

        function detectFaces(canvas) {
            logProcess('Processing image');
            return new Promise(async function (resolve, reject) {
                var image = new Image(); image.src = canvas.toDataURL();
                const displaySize = { width: canvas.width, height: canvas.height };
                //faceapi.matchDimensions(canvas, displaySize);
                ISWORKING = true;
                const detections = await faceapi.detectAllFaces(image, OPTIONS)
                    .withFaceLandmarks().withFaceDescriptors()@(!Request.IsAuthenticated ? ".withFaceExpressions().withAgeAndGender()" : null);
                ISWORKING = false;
                const resizedDetections = faceapi.resizeResults(detections, displaySize);
                //canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
                faceapi.draw.drawDetections(canvas, resizedDetections);
                //faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
                //faceapi.draw.drawFaceExpressions(canvas, resizedDetections);
                if (@(!Request.IsAuthenticated ? "true" : "false"))
                    resizedDetections.forEach(result => {
                        const { age, gender, genderProbability, expressions } = result;
                        const expression = getExpression(expressions);
                        new faceapi.draw.DrawTextField(
                            [
                                `${faceapi.round(age, 0)} years`,
                                `${gender} (${faceapi.round(genderProbability)})`,
                                `${expression.key} (${faceapi.round(expression.value)})`
                            ],
                            result.detection.box.bottomLeft
                        ).draw(canvas);
                    });

                var hashMap = new Map();
                logProcess(); logProcess('Face matching');
                FACEMATCHERS.forEach(function (faceMatcher, index) {
                    const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor));
                    results.forEach((result, i) => {
                        const box = resizedDetections[i].detection.box;
                        //const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() });
                        //drawBox.draw(canvas);
                        if (result.label != 'unknown' && (!hashMap.get(result.label) ||
                            hashMap.get(result.label).result.distance > result.distance))
                            hashMap.set(result.label, { drawBox: box, result: result, descriptor: detections[i].descriptor });
                    });
                });
                for (var value of hashMap.values()) {
                    const box = value.drawBox;
                    const drawBox = new faceapi.draw.DrawBox(box, { label: value.result.toString() });
                    drawBox.draw(canvas);
                    FACEMAP.set(value.result.label, value.result.distance);
                    const label = value.result.label;
                    const distance = value.result.distance;
                    const descriptor = value.descriptor;
                    if (localStorage.getItem(`${label}2`) == null ||
                        distance < JSON.parse(localStorage.getItem(`${label}2`)).distance)
                        localStorage.setItem(`${label}2`, JSON.stringify({ distance: distance, descriptor: JSON.stringify(Array.prototype.slice.call(descriptor)) }));
                }
                if (hashMap.get(USERID) && ISMOBILE) {
                    var check = $('#Check').attr('time', 30).show();
                    var interval = setInterval(function () {
                        var time = check.attr('time') - 0.5;
                        check.attr('time', time).text(`Check in (${time}s)`).toggle();
                        if (time <= 0) {
                            clearInterval(interval);
                            check.show().fadeToggle("slow", "linear");
                        }
                    }, 1000);
                }
                resolve();
            });
        }
    </script>

    <script>
        var USERID = '@UserId';
        var FACEMATCHERS = [];
        var FETCH = self.fetch;
        var FACEMAP = new Map();

        self.fetch = function (input) {
            return FETCH(input, { cache: "force-cache" }); // no-store
        }

        function showProgress(val) {
            $('#Progress').text(val);
        }
    </script>

    <script>
        $.blockUI({ message: '<h1><img src="@Url.Content("~/Content/busy.gif")" /> Loading ...<span id="Progress">?</span></h1>' });
        window.onload = function () {
            logProcess('Loading models');
            var libraries = [
                //faceapi.nets.mtcnn.loadFromUri('@Url.Content("~/Static")'),
                //faceapi.nets.ssdMobilenetv1.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.tinyFaceDetector.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.faceLandmark68Net.loadFromUri('@Url.Content("~/Static")'),
                faceapi.nets.faceRecognitionNet.loadFromUri('@Url.Content("~/Static")')
            ];
            if (@(!Request.IsAuthenticated ? "true" : "false")) {
                libraries.push(faceapi.nets.ageGenderNet.loadFromUri('@Url.Content("~/Static")'));
                libraries.push(faceapi.nets.faceExpressionNet.loadFromUri('@Url.Content("~/Static")'));
            }

            async function loadLibrary() {
                if (libraries.length > 0) {
                    showProgress(libraries.length);
                    setTimeout(function () {
                        var library = libraries.pop();
                        eval(library).then(loadLibrary);
                    }, 100);
                    return;
                }

                MTCNN = new faceapi.MtcnnOptions();
                SSDMOBILENETV1 = new faceapi.SsdMobilenetv1Options();
                TINYFACEDETECTOR = new faceapi.TinyFaceDetectorOptions();
                OPTIONS = TINYFACEDETECTOR;

                if (USERID.length > 0)
                    loadFaceID(USERID, TINYFACEDETECTOR).then(function (detection) {
                        if (detection) readFaceID(USERID);
                    });
                else logProcess();
            }
            setTimeout(loadLibrary, 100);
        }

        function loadFaceID(userID) {
            logProcess('Loading FaceID');
            return new Promise(async function (resolve) {
                var pathID = userID;
                if (localStorage.getItem(userID) == null) {
                    if (new RegExp('[0-9]*[a-z]+[0-9]+$').test(userID)) {
                        var path = userID.match(/[a-z]+/)[0];
                        paths = userID.split(path);
                        pathID = (paths[0].length > 0 ? paths[0] + '/' : '') + path + '/' + userID;
                    }
                    try {
                        const img = await faceapi.fetchImage(`@Url.Content("~/App_Data/FaceID/")${pathID}.jpg`);
                        try {
                            ISWORKING = true;
                            var detection = await faceapi.detectSingleFace(img, TINYFACEDETECTOR).withFaceLandmarks().withFaceDescriptor();
                            ISWORKING = false;
                            if (detection == undefined) {
                                logError('Load another model. Please wait about 1 minute...', userID != USERID ? userID : null);
                                await faceapi.nets.mtcnn.loadFromUri('@Url.Content("~/Static")');
                                ISWORKING = true;
                                detection = await faceapi.detectSingleFace(img, MTCNN).withFaceLandmarks().withFaceDescriptor();
                                ISWORKING = false;
                            }
                            if (detection != undefined)
                                localStorage.setItem(userID, JSON.stringify(Array.prototype.slice.call(detection.descriptor)));
                            else logError('Face Not Found', userID != USERID ? userID : null);
                            resolve(detection != undefined);
                        } catch (err) {
                            console.error(err);
                            logError('Not Enough Memory');
                        }
                    } catch (err) {
                        logError('File Not Found', userID != USERID ? userID : null);
                    }
                } else resolve(true);
                logProcess();
            });
        }

        function readFaceID(userID) {
            const descriptors = [new Float32Array(JSON.parse(localStorage.getItem(userID)))];
            if (localStorage.getItem(`${userID}2`) != null)
                descriptors.push(new Float32Array(JSON.parse(JSON.parse(localStorage.getItem(`${userID}2`)).descriptor)));
            const labeledFaceDescriptors = new faceapi.LabeledFaceDescriptors(userID, descriptors);
            FACEMATCHERS.push(new faceapi.FaceMatcher(labeledFaceDescriptors, descriptors.length == 1 ? 0.6 : 0.6)); //0.45
        }

        document.getElementById('Check').onclick = function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var code = prompt("Enter class's code:");
                    if (code == null) return; else $.blockUI();
                    document.getElementById('Canvas').toBlob(function (image) {
                        var form = new FormData();
                        form.append('code', code);
                        form.append('face', image);
                        form.append('user', USERID);
                        form.append('latitude', position.coords.latitude);
                        form.append('longitude', position.coords.longitude);
                        form.append('accuracy', FACEMAP.get(USERID));
                        form.append('friend', $('#Double').text());
                        form.append('distance', FACEMAP.get($('#Double').text()));
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("Upload", "Home")',
                            data: form,
                            processData: false,
                            contentType: false
                        }).done(function (data) {
                            if (data.startsWith('KO:')) {
                                data = data.split(':')[1];
                                alert(data);
                                $.unblockUI();
                            } else {
                                alert(data);
                                location.replace(`@Url.Content("~/App_Data/Checks/")${code.split('-')[0]}/${USERID}.jpg`);
                            }
                        });
                    }, 'image/jpeg');
                }, function (err) {
                    console.error(err);
                    alert(err.message);
                });
            } else {
                alert('Geolocation is not supported by this browser');
            }
        }

        function logError(error, more) {
            try {
                throw new Error('');
            } catch (err) {
                var form = new FormData();
                form.append('Code', USERID);
                form.append('Error', error);
                form.append('Trace', more ? more : err.stack || '');
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("Create", "ErrorLogs")',
                    data: form,
                    processData: false,
                    contentType: false
                });
                alert(error);
            }
        }
    </script>

    <script>
        $(function () {
            $('#Double').click(function () {
                var code = undefined;
                if (code = prompt('Enter another student ID number to check in together')) {
                    $(this).text(code = code.trim().toLowerCase());
                    $.blockUI();
                    setTimeout(function () {
                        loadFaceID(code, TINYFACEDETECTOR).then(function (detection) {
                            if (detection) readFaceID(code);
                            $.unblockUI();
                        });
                    }, 100);
                }
            });
        })
    </script>
    <script>var ISMOBILE = false;</script>
    <script src="~/Scripts/detectmobilebrowser.js"></script>
    <script src="//cdn.jsdelivr.net/npm/eruda"></script>
    <script>eruda.init();</script>
    <script>
        var ISWORKING = false;
        setInterval(function () {
            if (ISWORKING) {
                $.unblockUI();
                ISWORKING = false;
                alert('Your device is not supported. Please checkin with your friend.');
            } else console.log('not working');
        }, 3000);
    </script>
}